version: "1.0.0"
title: "Daily Todo â†’ Recipe Generator"
description: "Turn today's todo README into a concrete Goose recipe that will run overnight."
instructions: |
  You will read the todo file at {{ todo_file }} and synthesize a Goose recipe that carries out the tasks
  safely and idempotently. Prefer explicit commands over vague instructions. If a task needs tools,
  include them in the recipe's `extensions`. If a task produces files, write into project-relative paths.
  The generated YAML must include at least one of `instructions` or `prompt`.
  Finally, WRITE the YAML to {{ output_recipe }} (overwriting if it exists), then confirm success via structured output.

parameters:
  - key: todo_file
    input_type: string
    requirement: required
    description: "Path to today's todo README (e.g., ./todos/todo_26_10_25.README)"
  - key: output_recipe
    input_type: string
    requirement: required
    default: "./recipes/overnight.yaml"
    description: "Output path for the generated recipe"

extensions:
  - type: builtin
    name: developer
    bundled: true

# COMMENTED OUT IF MODEL PROVIDER IS CLAUDE CODE
# response:
#   json_schema:
#     type: object
#     required: [saved, path]
#     properties:
#       saved: { type: boolean, description: "Did we save the recipe file successfully?" }
#       path:  { type: string,  description: "Absolute or relative path to the saved recipe" }

activities:
  - "Generate and save tonight's recipe from {{ todo_file }}"

prompt: |
  You have full bash access via the developer extension. Use it for all file operations.

  1. Read {{ todo_file }} using: cat {{ todo_file }}

  2. Generate a complete Goose recipe YAML that executes those tasks. Include:
     - required fields: version, title, description
     - if using parameters, include them in the parameters section with the required fields: key, input_type, requirement, description
     - necessary extensions (developer, filesystem, timeout, available_tools, etc.)
     - explicit commands where possible
     - either `instructions` or `prompt` field (required by Goose)

  3. Write the YAML to {{ output_recipe }} using bash heredoc:
     cat > {{ output_recipe }} << 'EOF'
     [your generated yaml here]
     EOF

  4. Verify: ls -la {{ output_recipe }}

  5. Return JSON: {"saved": true, "path": "{{ output_recipe }}"}
